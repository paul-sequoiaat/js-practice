CREATE TABLE IF NOT EXISTS employee (
	id UUID primary key,
	name VARCHAR(50),
	salary INT
);

CREATE TABLE IF NOT EXISTS employee_audit (
	user_id UUID,
	name VARCHAR(50),
	salary INT,
	time_of_operation TIMESTAMP,
	operation VARCHAR(10)
);

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE OR REPLACE FUNCTION pre_check() RETURNS TRIGGER AS $emp_check$
	BEGIN
		IF (NEW.name IS NULL) THEN
			RAISE EXCEPTION 'NAME CANNOT BE NULL';
		END IF;

		IF (NEW.salary IS NULL) THEN
			RAISE EXCEPTION 'SALARY CANNOT BE NULL';
		ELSEIF (NEW.salary < 0) THEN
			RAISE EXCEPTION 'PROVIDE VALID SALARY';
		END IF;
		NEW.id = uuid_generate_v4();
		RETURN NEW;
	END;
$emp_check$ LANGUAGE plpgsql;


CREATE TRIGGER emp_check
BEFORE INSERT ON employee
FOR EACH ROW EXECUTE PROCEDURE pre_check();


CREATE OR REPLACE FUNCTION audit_log() RETURNS TRIGGER AS $emp_audit$
	BEGIN
	IF (TG_OP = 'DELETE') THEN
    	INSERT INTO employee_audit SELECT OLD.id, OLD.name, OLD.salary, CURRENT_TIMESTAMP, TG_OP;
	ELSE 
		INSERT INTO employee_audit SELECT NEW.id, NEW.name, NEW.salary, CURRENT_TIMESTAMP, TG_OP;
	END IF;
	RETURN NULL;
	END;
$emp_audit$ LANGUAGE plpgsql;


CREATE TRIGGER emp_audit
AFTER INSERT OR UPDATE OR DELETE ON employee
FOR EACH ROW EXECUTE PROCEDURE audit_log();